<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.group.mapper.BasketMapper">
	<!-- 휴지통으로 이동 -->
    <insert id="insertToBasket" parameterType="long">
        INSERT INTO basket (basket_id, writing_id, del_date)
        VALUES (basket_seq.NEXTVAL, #{writingId}, SYSDATE)
    </insert>
    
    <insert id="insertToBasketWithType">
    	INSERT INTO basket (basket_id, writing_id, repository_type, del_date)
    	VALUES (basket_seq.NEXTVAL, #{writingId}, #{repositoryType}, SYSDATE)
	</insert>
	
	<select id="selectBasketByWritingId" parameterType="long" resultType="com.yedam.app.group.service.BasketVO">
	SELECT 
	       b.writing_id,
	       p.title,
	       p.creation_date,
	       e.employee_name AS writer,
	       MIN(f.file_name) AS file_name,
	       b.del_date,
	       r.file_repository_type AS repository_type
	FROM basket b
	JOIN repository_post p ON b.writing_id = p.writing_id
	JOIN repository r ON p.file_repository_id = r.file_repository_id
	JOIN employees e ON p.employee_no = e.employee_no
	LEFT JOIN repository_file f ON b.writing_id = f.writing_id
	WHERE b.writing_id = #{writingId}
	GROUP BY b.writing_id, p.title, p.creation_date, e.employee_name, b.del_date, r.file_repository_type
</select>

<select id="getBasketDetailById" parameterType="long" resultType="com.yedam.app.group.service.BasketVO">
	SELECT 
	       b.writing_id,
	       p.title,
	       p.creation_date,
	       p.content,
	       e.employee_name AS writer,
	       MIN(f.file_name) AS file_name,
	       b.del_date,
	       r.file_repository_type AS repository_type
	FROM basket b
	JOIN repository_post p ON b.writing_id = p.writing_id
	JOIN repository r ON p.file_repository_id = r.file_repository_id
	JOIN employees e ON p.employee_no = e.employee_no
	LEFT JOIN repository_file f ON b.writing_id = f.writing_id
	WHERE b.writing_id = #{writingId}
	GROUP BY b.writing_id, p.title, p.creation_date, p.content, e.employee_name, b.del_date, r.file_repository_type
</select>
	
	<select id="getRepositoryTypeByWritingId" parameterType="long" resultType="string">
    	SELECT r.file_repository_type
    	FROM repository_post p
    	JOIN repository r ON p.file_repository_id = r.file_repository_id
   	 	WHERE p.writing_id = #{writingId}
	</select>

    <!-- 로그인한 휴지통 목록 조회 -->
    <select id="selectAllFromBasket" resultType="com.yedam.app.group.service.BasketVO">
        SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
    </select>
    
    <!-- 30일 지난 휴지통 글 조회 -->
	<select id="selectExpiredBasketWritingIds" resultType="long">
    	SELECT writing_id
    	FROM basket
    	WHERE del_date &lt;= SYSDATE - 30
	</select>

    <!-- 파일 삭제 -->
    <delete id="deleteFilesByWritingId" parameterType="long">
        DELETE FROM repository_file WHERE writing_id = #{writingId}
    </delete>

    <!-- 게시글 삭제 -->
    <delete id="deletePostByWritingId" parameterType="long">
        DELETE FROM repository_post WHERE writing_id = #{writingId}
    </delete>

    <!-- basket 삭제 -->
    <delete id="deleteBasketByWritingId" parameterType="long">
        DELETE FROM basket WHERE writing_id = #{writingId}
    </delete>
    
    <select id="selectAllFromBasketBySuber" resultType="com.yedam.app.group.service.BasketVO">
    SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName,
        COUNT(f.file_id) AS fileCount
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN repository r ON p.file_repository_id = r.file_repository_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    WHERE r.suber_no = #{suberNo}
    AND r.file_repository_type = '전체'
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
</select>

<select id="selectBasketByTypeFiltered" resultType="com.yedam.app.group.service.BasketVO">
    SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName,
        COUNT(f.file_id) AS fileCount
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN repository r ON p.file_repository_id = r.file_repository_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    WHERE
    <choose>
        <when test="'전체'.equals(repositoryType)">
            r.suber_no = #{suberNo}
        </when>
        <when test="'부서'.equals(repositoryType)">
            r.department_no = #{departmentNo}
        </when>
        <when test="'개인'.equals(repositoryType)">
            p.employee_no = #{employeeNo}
        </when>
        <otherwise>
            1 = 0
        </otherwise>
    </choose>
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
</select>

<select id="selectOwnTotalBasketPosts" resultType="com.yedam.app.group.service.BasketVO">
    SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName,
        COUNT(f.file_id) AS fileCount
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN repository r ON p.file_repository_id = r.file_repository_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    WHERE r.suber_no = #{suberNo}
      AND r.file_repository_type = '전체'
      AND p.employee_no = #{employeeNo}
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
</select>

<select id="selectDepartmentBasketFiltered" resultType="com.yedam.app.group.service.BasketVO">
    SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName,
        COUNT(f.file_id) AS fileCount
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN repository r ON p.file_repository_id = r.file_repository_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    WHERE r.department_no = #{departmentNo}
      AND r.file_repository_type = '부서'
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
</select>

<select id="selectIndividualBasket" resultType="com.yedam.app.group.service.BasketVO">
    SELECT 
        b.basket_id, 
        b.del_date, 
        p.title, 
        p.creation_date, 
        e.employee_name AS writer,
        p.writing_id,
        MIN(f.file_name) AS fileName,
        COUNT(f.file_id) AS fileCount
    FROM basket b
    JOIN repository_post p ON b.writing_id = p.writing_id
    JOIN repository r ON p.file_repository_id = r.file_repository_id
    JOIN employees e ON p.employee_no = e.employee_no
    LEFT JOIN repository_file f ON p.writing_id = f.writing_id
    WHERE r.file_repository_type = '개인'
      AND p.employee_no = #{employeeNo}
    GROUP BY b.basket_id, b.del_date, p.title, p.creation_date, e.employee_name, p.writing_id
    ORDER BY b.del_date DESC
</select>

<select id="getFileIdsByWritingId" parameterType="long" resultType="long">
    SELECT file_id FROM repository_file WHERE writing_id = #{writingId}
</select>

<!-- 자식 테이블 예시: download_log 삭제 -->
<delete id="deleteDownloadLogsByFileId" parameterType="long">
    DELETE FROM download WHERE file_id = #{fileId}
</delete>
</mapper>