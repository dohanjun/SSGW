<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.group.mapper.EmpMapper">

      <!-- 사원 등록 -->
      <insert id="insertEmpInfo"
              parameterType="EmpVO">
              <selectKey keyProperty="employeeNo"
                         resultType="Integer"
                         order="BEFORE">
            	SELECT NVL(MAX(EMPLOYEE_NO), 100) + 1
				FROM employees
			 </selectKey>
              
              INSERT INTO employees
                         (EMPLOYEE_NO
							,EMPLOYEE_NAME
							,EMPLOYEE_ID
							,EMPLOYEE_PW
							,HIRE_DATE
							,PHONE_NUMBER
							,ADDRESS
							,PROFILE_IMAGE
							,SUBER_NO
							,RANK_ID
							,RIGHTS_ID
							,DEPARTMENT_NO
							,PROFILE_IMAGE_BLOB                        
                         )
                         VALUES
                         (
                           #{employeeNo}
                           ,#{employeeName}
                           ,#{employeeId}
                           ,#{employeePw}
                           ,#{hireDate}
                           ,#{phoneNumber}
                           ,#{address}
                           ,#{profileImage}
                           ,#{suberNo}
                           ,#{rankId}
                           ,#{rightsId}
                           ,#{departmentNo}
                           ,#{profileImageBLOB,jdbcType=BLOB}
                         ) <!-- MyBatis가 데이터 타입을 정확히 인식하도록 jdbcType=BLOB을 추가해야 함 -->
      </insert>

      
      <!-- 전체 조회 -->
	  <select id="selectEmpList" 
	          resultType="EmpVO">
		       SELECT EMPLOYEE_NO
		         , e.EMPLOYEE_NAME
		         , e.EMPLOYEE_ID
		         , e.EMPLOYEE_PW
		         , e.RESIGNATION_STATUS
		         , e.TEMP_IP
		         , e.PASSWORD_CHANGED
		         , e.HIRE_DATE
		         , e.EXIT_DATE
		         , e.PHONE_NUMBER
		         , e.ADDRESS
		         , e.PROFILE_IMAGE
		         , e.SUBER_NO
		         , e.RANK_ID
		         , e.RIGHTS_ID
		         , e.MANAGER
		         , e.DEPARTMENT_NO
		         , e.PROFILE_IMAGE_BLOB
		         , d.DEPARTMENT_NAME
		         , r.JOB_TITLE_NAME
		         , r.JOB_TITLE_LEVEL
		         , rt.RIGHTS_NAME
		         , rt.RIGHTS_LEVEL
		    FROM EMPLOYEES e
		    LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
		    LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
		    LEFT JOIN RIGHTS rt ON e.RIGHTS_ID = rt.RIGHTS_ID
		    WHERE e.SUBER_NO = #{suberNo}
		    ORDER BY e.EMPLOYEE_NO
	  </select>
      
      <!-- 사원번호 자동조회 -->
      <select id="getNextEmployeeNo" 
               resultType="int">
       SELECT NVL(MAX(EMPLOYEE_NO), 100) + 1 FROM EMPLOYEES
      </select>
      
      <!-- 사원정보 상세 조회 -->
      <select id="selectEmpInfo"
              parameterType="EmpVO"
              resultType="EmpVO">
              
              SELECT EMPLOYEE_NO
					 , e.EMPLOYEE_NAME
					 , e.EMPLOYEE_ID
					 , e.EMPLOYEE_PW
					 , e.RESIGNATION_STATUS
					 , e.TEMP_IP
					 , e.PASSWORD_CHANGED
					 , e.HIRE_DATE
					 , e.EXIT_DATE
					 , e.PHONE_NUMBER
					 , e.ADDRESS
					 , e.PROFILE_IMAGE
					 , e.SUBER_NO
					 , e.RANK_ID
					 , e.RIGHTS_ID
					 , e.MANAGER
					 , e.DEPARTMENT_NO
					 , e.PROFILE_IMAGE_BLOB
					 , d.DEPARTMENT_NAME
                     , r.JOB_TITLE_NAME
                     , rt.RIGHTS_NAME
   			 FROM EMPLOYEES e
   			 LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
    		 LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
    		 LEFT JOIN RIGHTS rt ON e.RIGHTS_ID = rt.RIGHTS_ID
    		 WHERE e.EMPLOYEE_NO = #{employeeNo}  
           
      </select>
      
      <!-- 수정 업데이트 -->
      <update id="updateEmpInfo"
              parameterType="EmpVO">
              
              UPDATE employees
               <set>
                   <if test="employeePw != null and employeePw != ''"> EMPLOYEE_PW  =   #{employeePw},</if>
                  EMPLOYEE_NAME =  #{employeeName},
                  DEPARTMENT_NO =  #{departmentNo},
                  RANK_ID    =     #{rankId},
                  RIGHTS_ID  =     #{rightsId},
                  PHONE_NUMBER =   #{phoneNumber},
                  ADDRESS     =    #{address},
                 <if test="hireDate != null"> HIRE_DATE = #{hireDate},</if>
			     EXIT_DATE = #{exitDate,  jdbcType=DATE},
			     <if test="resignationStatus != null"> RESIGNATION_STATUS = #{resignationStatus},</if>
			     <if test="profileImageBLOB != null"> PROFILE_IMAGE_BLOB = #{profileImageBLOB,jdbcType=BLOB},</if>
			     <if test="tempIp != null and tempIp != ''"> TEMP_IP = #{tempIp}</if>
               </set>
                 WHERE EMPLOYEE_NO = #{employeeNo}
                 AND SUBER_NO = #{suberNo}
                 
      </update>
      <!-- 로그인한 사람 아이디 -->
	  <select id="findByEmployeeId" parameterType="String" resultType="EmpVO">
	  		 SELECT * 
	  		 FROM employees 
	  		 WHERE employee_id = #{employeeId}
	  </select>
	  
	  <sql id="criteria">
		    WHERE 1=1
		      AND e.SUBER_NO = #{suberNo}
		      
		      <if test="departmentNo != null and departmentNo !=''">
		        AND e.DEPARTMENT_NO = #{departmentNo}
		      </if>
		      
		      <if test="rankId != null and rankId != ''">
		        AND e.RANK_ID = #{rankId}
		      </if>
		      
		      <if test="employeeName != null and employeeName != ''">
		        AND e.EMPLOYEE_NAME LIKE '%' || #{employeeName} || '%'
		      </if>
		      
		      <if test="resignationStatus != null and resignationStatus != ''">
			    AND e.RESIGNATION_STATUS = #{resignationStatus}
			  </if>
	  </sql>
	  <!--  페이징을 적용한 사원 목록 조회 -->
		<select id="pageselectEmp" resultType="EmpVO">
		  SELECT EMPLOYEE_NO
		       , EMPLOYEE_NAME
		       , EMPLOYEE_ID, HIRE_DATE
		       , PHONE_NUMBER
		       , DEPARTMENT_NAME
		       , JOB_TITLE_NAME
		  FROM (
		    SELECT e.EMPLOYEE_NO
		         , e.EMPLOYEE_NAME
		         , e.EMPLOYEE_ID
		         , e.HIRE_DATE
		         , e.PHONE_NUMBER
		         , d.DEPARTMENT_NAME
		         , r.JOB_TITLE_NAME
		         , ROW_NUMBER() OVER (ORDER BY e.EMPLOYEE_NO ASC) AS rn
		    FROM EMPLOYEES e
		    LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
		    LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
		   <include refid="criteria"></include>
		    
		  ) sub
		  WHERE sub.rn BETWEEN #{offset} + 1 AND #{offset} + #{size}
		</select>
		
	  <!--  전체 사원 수 조회 -->
		<select id="countEmp" resultType="int">
		  SELECT COUNT(*)
		  FROM EMPLOYEES e
		  LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
		  LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
		 <include refid="criteria"></include>
		</select>
	  
	  <!-- 사원번호로 랜덤 비밀번호를 업데이트 -->
	  <update id="updatePassword">
		 UPDATE EMPLOYEES
		 SET EMPLOYEE_PW = #{employeePw} 
		 WHERE EMPLOYEE_NO = #{employeeNo}
      </update>
	  
	  <select id="getFirstIpByEmployeeNo" parameterType="int" resultType="string">
    	SELECT s.first_ip
    	FROM employees e
    	JOIN suber s ON e.suber_no = s.suber_no
    	WHERE e.employee_no = #{employeeNo}
	 </select>

	<select id="getSecondIpByEmployeeNo" parameterType="int" resultType="string">
    	SELECT s.second_ip
    	FROM employees e
    	JOIN suber s ON e.suber_no = s.suber_no
    	WHERE e.employee_no = #{employeeNo}
	</select>
	
	 <update id="updateEmployeePasswordBySuberNo" parameterType="EmpVO">
	    UPDATE employees
	    SET employee_pw = #{employeePw}
	    WHERE suber_no = #{suberNo}
	</update>

</mapper>