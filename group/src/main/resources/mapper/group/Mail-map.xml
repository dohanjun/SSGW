<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.group.mapper.MailMapper">

	<!-- 단건조회 -->
	<select id="getPageList" parameterType="PageListVO"
		resultType="PageListVO">
		SELECT *
		FROM Mail
		WHERE MAIL_ID = #{mailId}
	</select>


	<sql id="mailCondition">
		<where>
			<if test="employeeNo != null">
				e.employee_no = #{employeeNo}
			</if>

			<if test="search != null and search != ''">
				( m.TITLE LIKE '%' || #{search} || '%'
				OR m.GET_USER LIKE '%' || #{search} || '%'
				OR m.RECODE LIKE '%' || #{search} || '%' )
			</if>

			<if test="mailType != null">
				<choose>
					<when test="mailType == '받은'">
						and m.mail_type = '받은'
						and m.get_user = #{getUser}
					</when>
					<when test="mailType == '보낸'">
						and m.mail_type = '보낸'
						and m.employee_id = #{employeeId}
					</when>
					<when test="mailType == '임시'">
						and (m.mail_type = '받은' and m.get_user = #{getUser}
						or m.mail_type = '보낸' and m.employee_id = #{employeeId})
					</when>
					<when test="mailType == '휴지통'">
						and (m.mail_type = '받은' and m.get_user = #{getUser}
						or m.mail_type = '보낸' and m.employee_id = #{employeeId})
					</when>
					<otherwise>
						<!-- 기본 동작: '받은'과 '보낸' 모두 조회 -->
						(m.mail_type = '받은' and m.get_user = #{getUser}
						or m.mail_type = '보낸' and m.employee_id = #{employeeId})
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>


	<!-- 메일전체조회 -->
	<select id="MailFindAll" resultType="MailVO">
		SELECT B.* FROM ( SELECT A.*, ROWNUM RN FROM(
		SELECT m.mail_id
		,m.title
		,m.content
		,m.sent_state
		,m.sent_date
		,m.employee_id
		,m.attached_file_name
		,m.get_user
		,m.cc
		,m.recode
		,m.mail_type
		,e.employee_no
		FROM mail m
		INNER JOIN employees e
		ON m.employee_id =
		e.employee_id
		<include refid="mailCondition"></include>
		ORDER BY
		<choose>
			<when test='sortKey !=  null and sortKey.equals("list")'>
				TITLE
			</when>
			<when test='"file".equals(sortKey)'>
				ATTACHED_FILE_NAME
			</when>
			<when test='sortKey !=  null and sortKey.equals("desc")'>
				mail_Id DESC
			</when>
			<when test='sortKey !=  null and sortKey.equals("asc")'>
				mail_id ASC
			</when>
			<otherwise>
				mail_id DESC
			</otherwise>
		</choose>
		) A ) B WHERE RN BETWEEN #{start} AND #{end}
	</select>

	<!-- 메일단건조회 -->
	<select id="MailFindInfo" resultType="MailVO">
		SELECT mail_id
		,title
		,content
		,sent_state
		,sent_date
		,employee_id
		,attached_file_name
		,get_user
		,cc
		,recode
		,mail_type
		FROM Mail
		WHERE mail_id = #{mailId}
	</select>

	<select id="fileCount" resultType="MailVO">
		SELECT COUNT(*)
		FROM mail
		WHERE attached_file_name IS NOT NULL
		AND mail_id = 149
	</select>

	<!-- 메일등록 -->
	<insert id="mailCreate" parameterType="MailVO">
		<selectKey keyProperty="mailId" resultType="Integer"
			order="BEFORE">
			SELECT NVL(MAX(mail_id) + 1, 100) as mail_id
			FROM Mail
		</selectKey>
		INSERT INTO Mail(
		mail_id
		,title
		,content
		,sent_state
		,sent_date
		,employee_id
		,attached_file_name
		,get_user
		,cc
		,recode
		,mail_type)

		VALUES(
		#{mailId}
		,#{title}
		,#{content}
		,#{sentState}
		,sysdate
		,#{employeeId}
		,#{attachedFileName}
		,#{getUser}
		,#{cc}
		,#{recode}
		,#{mailType}
		)
	</insert>

	<!-- 메일검색기록 -->
	<insert id="MailRecode" parameterType="MailVO">
		INSERT INTO Mail recode
		VALUES #{recode}
	</insert>

	<!-- 메일답장 -->
	<update id="MailPutDate" parameterType="MailVO">
		UPDATE Mail
		SET get_user = #{getUser}
		,cc = #{cc}
		,title = #{title}
		,attached_file_name = #{attachedFileName}
		,content = #{content}
		,recode = #{recode}
		WHERE mail_id = #{mailId}
	</update>

	<!-- 메일전달 -->
	<update id="MailVeryDate" parameterType="MailVO">
		UPDATE Mail
		SET employee_id = #{employeeId}
		,cc = #{cc}
		WHERE mail_id = #{mailId}
	</update>
	
	<!-- 단건 임시 이동 -->
	<update id="Mailpro" parameterType="int">
	UPDATE Mail
	SET mail_type = '임시'
	WHERE mail_id = #{mailId}
	</update>

<!-- 단건 휴지통 이동 -->
	<update id="MailDel" parameterType="int">
	UPDATE Mail
	SET mail_type = '휴지통'
	WHERE mail_id = #{mailId}
	</update>

	<!-- 여러 개의 메일 휴지통 이동 -->
	<update id="MailDels" parameterType="java.util.List">
		UPDATE Mail
		SET mail_type = '휴지통'
		WHERE mail_id IN
		<foreach item="mailId" collection="list" open="("
			separator="," close=")">
			#{mailId}
		</foreach>
	</update>

	<!-- 전체건수반환 -->
	<select id="getCount" resultType="int">
		SELECT COUNT(*)
		FROM mail m
		INNER JOIN employees e
		ON m.employee_id =
		e.employee_id
		<include refid="mailCondition"></include>
	</select>


	<!-- 임시메일 자동삭제 -->
	<delete id="deleteExpiredMails">
		DELETE FROM mail
		WHERE is_temporary = 1
		AND expiry_date
		&lt;= sysdate
	</delete>

	<!-- 휴지통 자동삭제 -->
	<delete id="deleteCurrentMails">
		DELETE FROM mail
		WHERE is_temporary = 1
		AND expiry_date
		&lt;= sysdate
	</delete>
	
	<!-- 완전삭제 -->
	<delete id="MailRemove" parameterType="int">
		DELETE FROM Mail
		WHERE
		mail_id = #{mailId}
	</delete>

</mapper>