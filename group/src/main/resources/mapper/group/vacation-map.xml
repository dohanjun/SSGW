<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.app.group.mapper.VacationMapper">


        <!-- 연차 유형 조회 -->
    <select id="getAnnualVacationType" resultType="VacationVO">
        SELECT VACATION_TYPE_ID,
               VACATION_TYPE_NAME,
               VACATION_DATE,
               REQUIRED_PROOF_DOCUMENT_FILE,
               SUBER_NO
        FROM VACATION_TYPE
        WHERE VACATION_TYPE_NAME = '연차'
          AND SUBER_NO = #{suberNo}
    </select>

        <!-- 연차 존재 여부 확인 -->
    <select id="existsLeaveHistory" resultType="int">
        SELECT COUNT(*)
        FROM LEAVE_HISTORY
        WHERE EMPLOYEE_NO = #{employeeNo}
          AND YEAR = #{year}
    </select>

        <!-- 연차 내역 등록 -->
    <insert id="insertLeaveHistory" parameterType="VacationVO">
        INSERT INTO LEAVE_HISTORY (
            LEAVE_HISTORY_ID,
            EMPLOYEE_NO,
            GRANTED_VACATION,
            USED_VACATION,
            REMAINING_VACATION,
            YEAR
        ) VALUES (
            #{leaveHistoryId},
            #{employeeNo},
            #{grantedVacation},
            0,
            #{remainingVacation},
            #{year}
            
        )
    </insert>
    
    <!-- 전체 회사 번호 조회 -->
	<select id="getAllSuberNos" resultType="int">
	    	SELECT DISTINCT SUBER_NO FROM EMPLOYEES
	</select>
	
	<!-- 전체 사원 목록 조회 (입사일 + 퇴사 여부 포함) -->
	<select id="getAllEmployeesWithHireDateAndStatus" resultType="VacationVO">
		    SELECT EMPLOYEE_NO, SUBER_NO, HIRE_DATE, RESIGNATION_STATUS
		    FROM EMPLOYEES
		    WHERE HIRE_DATE IS NOT NULL
		      AND SUBER_NO = #{suberNo}
	</select>
    
    <!-- 시퀀스 (임시) -->
    <select id="getNextLeaveHistoryId" resultType="int">
        SELECT NVL(MAX(LEAVE_HISTORY_ID), 100) + 1 FROM LEAVE_HISTORY
    </select>
    
    <!-- 기안문서번호 가져오기--> 
	<select id="getNextDraftNo" resultType="int">
	    SELECT NVL(MAX(DRAFT_NO), 100) + 1
   		FROM APRV_DOCUMENTS
	</select>
	
	
	<!-- 연차 내역 업데이트 -->
    <update id="updateLeaveHistory" parameterType="VacationVO">
        UPDATE LEAVE_HISTORY
        SET GRANTED_VACATION = #{grantedVacation},
            REMAINING_VACATION = #{remainingVacation}
        WHERE EMPLOYEE_NO = #{employeeNo}
          AND YEAR = #{year}
    </update>
    
    <!-- 휴가유형 등록 -->
	<insert id="insertVacationType" parameterType="VacationVO">
	    INSERT INTO VACATION_TYPE (
	        VACATION_TYPE_ID,
	        VACATION_TYPE_NAME,
	        VACATION_DATE,
	        REQUIRED_PROOF_DOCUMENT_FILE,
	        SUBER_NO
	    ) VALUES (
	        #{vacationTypeId},
	        #{vacationTypeName},
	        #{vacationDate},
	        #{requiredProofDocumentFile},
	        #{suberNo}
	    )
	</insert>

	<!-- 휴가유형 ID 생성 (시퀀스 또는 MAX + 1 방식) -->
		<select id="getNextVacationTypeId" resultType="int">
		    SELECT NVL(MAX(VACATION_TYPE_ID), 0) + 1 
		    FROM VACATION_TYPE
		</select>
		
		
		<!-- 전체 휴가유형 리스트 -->
		<select id="selectVacationTypeList" resultType="VacationVO">
		  SELECT VACATION_TYPE_ID,
		         VACATION_TYPE_NAME,
		         VACATION_DATE,
		         REQUIRED_PROOF_DOCUMENT_FILE,
		         SUBER_NO
		  FROM VACATION_TYPE
		  WHERE SUBER_NO = #{suberNo}
		  ORDER BY VACATION_TYPE_ID
		</select>
		
		<!-- 페이징용 조건절 -->
		<sql id="vacaCriteria">
		  WHERE SUBER_NO = #{suberNo}
		</sql>
		
		<!-- 페이징 적용된 휴가유형 리스트 -->
		<select id="selectVacationTypePaging" resultType="VacationVO">
		  SELECT *
		  FROM (
		    SELECT v.*, ROW_NUMBER() OVER (ORDER BY VACATION_TYPE_ID) AS rn
		    FROM VACATION_TYPE v
		    <include refid="vacaCriteria"/>
		  )
		  WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{size}
		</select>
		
		<!-- 전체 휴가유형 개수 -->
		<select id="countVacationType" resultType="int">
		  SELECT COUNT(*) FROM VACATION_TYPE
		  <include refid="vacaCriteria"/>
		</select>
		
		<!-- 휴가 검색기능  -->
		<sql id="vacationCriteria">
		  WHERE 1=1
		  <if test="suberNo != null"> AND e.SUBER_NO = #{suberNo} </if>
		
		  <if test="resignationStatus != null and resignationStatus != ''">
		    AND e.RESIGNATION_STATUS = #{resignationStatus}
		  </if>
		
		  <if test="employeeName != null and employeeName != ''">
		    AND e.EMPLOYEE_NAME LIKE '%' || #{employeeName} || '%'
		  </if>
		
		  <if test="departmentNo != null and departmentNo != ''">
		    AND e.DEPARTMENT_NO = #{departmentNo}
		  </if>
		
		  <if test="rankId != null and rankId != ''">
		    AND e.RANK_ID = #{rankId}
		  </if>
		</sql>
		
		
		<!-- 휴가조회 페이징 기능 -->
		<select id="selectVacationStatusPaging" resultType="VacationVO" parameterType="VacationVO">
		  SELECT * FROM (
		    SELECT e.EMPLOYEE_NO,
		           e.EMPLOYEE_NAME,
		           e.HIRE_DATE,
		           d.DEPARTMENT_NAME,
		           r.JOB_TITLE_NAME,
		           l.GRANTED_VACATION,
		           l.REMAINING_VACATION,
		           l.USED_VACATION,
		           ROW_NUMBER() OVER (ORDER BY e.EMPLOYEE_NO) rn
		    FROM EMPLOYEES e
		    LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
		    LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
		    LEFT JOIN LEAVE_HISTORY l ON e.EMPLOYEE_NO = l.EMPLOYEE_NO
		    <include refid="vacationCriteria"/>
		  )
		  WHERE rn BETWEEN #{offset} + 1 AND #{offset} + #{size}
		</select>
		
		
		<!-- 총 개수 조회 -->
		<select id="countVacationStatus" parameterType="VacationVO" resultType="int">
		  SELECT COUNT(*) FROM EMPLOYEES e
		  LEFT JOIN DEPARTMENT d ON e.DEPARTMENT_NO = d.DEPARTMENT_NO
		  LEFT JOIN RANK r ON e.RANK_ID = r.RANK_ID
		  LEFT JOIN LEAVE_HISTORY l ON e.EMPLOYEE_NO = l.EMPLOYEE_NO
		  <include refid="vacationCriteria"/>
		</select>
		

<select id="selectVacationRequest" parameterType="VacationRequestVO" resultType="VacationRequestVO">
	SELECT DRAFT_NO
           ,USED_VACATION
           ,START_VACATION_DATE
           ,END_VACATION_DATE
           ,EMPLOYEE_NO
           ,VACATION_TYPE_ID
    FROM   vacation_request
    WHERE  DRAFT_NO = #{draftNo}
</select>

<update id="updateLeaveHistoryRequest" parameterType="VacationVO">
	 UPDATE leave_history
     SET USED_VACATION = USED_VACATION + #{usedVacation},
         REMAINING_VACATION = REMAINING_VACATION - #{usedVacation}
     WHERE EMPLOYEE_NO = #{employeeNo}
       AND YEAR = TO_CHAR(SYSDATE, 'YYYY')
</update>
   
        <!-- 잔여일 계산 -->
		<select id="getLeaveHistory" parameterType="map" resultType="VacationVO">
		    SELECT GRANTED_VACATION, USED_VACATION, REMAINING_VACATION
		    FROM LEAVE_HISTORY
		    WHERE EMPLOYEE_NO = #{employeeNo}
		      AND YEAR = #{year}
		</select>
		
		<!-- 휴가유형 삭제 -->
		<delete id="deleteVacationType">
		    DELETE FROM VACATION_TYPE
		    WHERE VACATION_TYPE_ID = #{vacationTypeId}
		</delete>

</mapper>