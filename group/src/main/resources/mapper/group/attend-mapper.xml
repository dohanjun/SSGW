<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.app.group.mapper.AttendanceMapper">

	<!-- ✅ ResultMap -->
	<resultMap id="AttendanceResultMap"
		type="com.yedam.app.group.service.AttendanceManagementVO">
		<id property="workAttitudeId" column="work_attitude_id" />
		<result property="attendanceDate" column="attendance_date" />
		<result property="clockInTime" column="clock_in_time" />
		<result property="clockOutTime" column="clock_out_time" />
		<result property="workAttitudeType" column="work_attitude_type" />
		<result property="reason" column="reason" />
		<result property="totalWorkingHours"
			column="total_working_hours" />
		<result property="departmentName" column="department_name" />
		<result property="employeeNo" column="employee_no" />
		<result property="employeeName" column="employee_name" />
		<result property="totalOvertimeTime" column="overtime_time" />
		<association property="overtimeList"
			javaType="com.yedam.app.group.service.OvertimeVO">
			<result property="overtimeTime" column="overtime_time" />
			<result property="overtimeDate" column="overtime_date" />
			<result property="overtimeType" column="overtime_type" />
			<result property="overtimeId" column="overtime_id" />
			<result property="draftDocumentNumber"
				column="draft_document_number" />
			<result property="workAttitudeId" column="work_attitude_id" />
		</association>
	</resultMap>

	<!-- ✅ 출근 등록 -->
	<insert id="insertClockIn"
		parameterType="AttendanceManagementVO">
		INSERT INTO attendance_management (
		work_attitude_id,
		employee_no, attendance_date,
		clock_in_time, work_attitude_type, reason
		) VALUES (
		ATTENDANCE_MANAGEMENT_SEQ.NEXTVAL,
		#{employeeNo},
		#{attendanceDate}, #{clockInTime},
		#{workAttitudeType}, #{reason}
		)
	</insert>

	<!-- ✅ 퇴근 시간 업데이트 (이전버전, 현재 사용 안 함) -->
	<update id="updateClockOut"
		parameterType="AttendanceManagementVO">
		UPDATE attendance_management
		SET clock_out_time =
		#{clockOutTime}
		WHERE employee_no = #{employeeNo}
		AND
		TRUNC(attendance_date) = TRUNC(SYSDATE)
		AND clock_out_time IS NULL
	</update>

	<!-- ✅ 출근 여부 확인 -->
	<select id="countTodayClockIn" parameterType="int"
		resultType="int">
		SELECT COUNT(*) FROM attendance_management
		WHERE employee_no
		= #{employeeNo}
		AND TRUNC(attendance_date) = TRUNC(SYSDATE)
		AND
		clock_in_time IS NOT NULL
	</select>

	<!-- ✅ 퇴근 여부 확인 -->
	<select id="countTodayClockOut" parameterType="int"
		resultType="int">
		SELECT COUNT(*) FROM attendance_management
		WHERE employee_no
		= #{employeeNo}
		AND TRUNC(attendance_date) = TRUNC(SYSDATE)
		AND
		clock_out_time IS NOT NULL
	</select>

	<!-- ✅ 출결 내역 조회 -->
	<select id="selectInfo" parameterType="int"
		resultMap="AttendanceResultMap">
		SELECT
		am.work_attitude_id,
		am.attendance_date,
		am.clock_in_time,
		am.clock_out_time,
		am.work_attitude_type,
		am.reason,
		am.total_working_hours,
		d.department_name,
		e.employee_no,
		e.employee_name,
		o.overtime_time,
		o.overtime_date,
		o.overtime_type,
		o.overtime_id,
		o.draft_document_number
		FROM attendance_management am
		JOIN employees e ON am.employee_no = e.employee_no
		JOIN department d ON
		e.department_no = d.department_no
		LEFT JOIN overtime o ON
		am.work_attitude_id = o.work_attitude_id
		WHERE am.employee_no =
		#{employeeNo}
		ORDER BY am.attendance_date DESC
	</select>

	<!-- ✅ 초과근무 등록 -->
	<insert id="insertOvertime" parameterType="OvertimeVO">
		INSERT INTO overtime (
		overtime_id, overtime_time, overtime_date, overtime_type,
		work_attitude_id, draft_document_number
		) VALUES (
		OVERTIME_SEQ.NEXTVAL, #{overtimeTime}, #{overtimeDate},
		#{overtimeType},
		#{workAttitudeId}, #{draftDocumentNumber}
		)
	</insert>

	<!-- ✅ 특정 출결의 초과근무 상세 조회 -->
	<select id="getOvertimeByWorkAttitudeId" parameterType="int"
		resultType="OvertimeVO">
		SELECT overtime_time, overtime_date, overtime_type,
		overtime_id, work_attitude_id, draft_document_number
		FROM overtime
		WHERE work_attitude_id = #{workAttitudeId}
		ORDER BY overtime_date DESC
	</select>

	<!-- ✅ 초과근무 총합 (분) -->
	<select id="calculateTotalOvertime" parameterType="int"
		resultType="int">
		SELECT COALESCE(SUM(overtime_time), 0)
		FROM overtime o
		INNER
		JOIN attendance_management am ON am.work_attitude_id =
		o.work_attitude_id
		WHERE am.employee_no = #{employeeNo}
	</select>

	<!-- ✅ 부서 근무 요약 -->
	<select id="getDepartmentAttendanceSummary"
		resultType="AttendanceSummaryDTO">
		SELECT
		e.employee_no,
		e.employee_name,
		d.department_name,  <!-- 여기부분 수정 -->
		ROUND(SUM( CASE
		WHEN a.clock_in_time IS NOT NULL AND a.clock_out_time
		IS NOT NULL THEN
		(a.clock_out_time - a.clock_in_time) * 24
		ELSE 0
		END
		),
		2)
		AS totalWorkingHours,
		ROUND(NVL(SUM(o.overtime_time), 0) / 60, 2) AS
		overtimeHours
		FROM employees e
		JOIN department d ON e.department_no =
		d.department_no
		LEFT JOIN attendance_management a ON e.employee_no =
		a.employee_no
		LEFT JOIN overtime o ON a.work_attitude_id =
		o.work_attitude_id
		WHERE e.department_no = #{departmentNo}
		GROUP BY
		e.employee_no, e.employee_name, d.department_name
		ORDER BY
		e.employee_no
	</select>

	<!-- ✅ 오늘 부서원 출결 리스트 -->
	<select id="selectTodayAttendanceByDept" parameterType="int"
		resultMap="AttendanceResultMap">
		SELECT
		a.work_attitude_id,
		a.attendance_date,
		a.clock_in_time,
		a.clock_out_time,
		a.work_attitude_type,
		a.reason,
		a.total_working_hours,
		d.department_name,
		e.employee_no,
		e.employee_name,
		o.overtime_time AS
		totalOvertimeTime
		FROM employees e
		JOIN department d ON e.department_no
		= d.department_no
		LEFT JOIN attendance_management a ON e.employee_no =
		a.employee_no
		AND TRUNC(a.attendance_date) = TRUNC(SYSDATE)
		LEFT JOIN
		overtime o ON a.work_attitude_id = o.work_attitude_id
		WHERE
		d.department_no = #{departmentNo}
		ORDER BY a.clock_in_time
	</select>

	<!-- ✅ 최근 출결 요약 -->
	<select id="getAttendanceSummary" parameterType="int"
		resultType="AttendanceManagementVO">
		SELECT *
		FROM (
		SELECT am.*,
		d.department_name,
		e.employee_name
		FROM attendance_management am
		JOIN employees e ON
		am.employee_no =
		e.employee_no
		JOIN department d ON e.department_no =
		d.department_no
		WHERE am.employee_no = #{employeeNo}
		ORDER BY
		am.attendance_date DESC
		)
		WHERE ROWNUM = 1
	</select>

	<!-- ✅ 퇴근 + 근무시간 업데이트 (추가된 쿼리) -->
	<update id="updateClockOutAndWorkingHours"
		parameterType="AttendanceManagementVO">
		UPDATE attendance_management
		SET
		clock_out_time =
		#{clockOutTime},
		total_working_hours = #{totalWorkingHours}
		WHERE
		employee_no = #{employeeNo}
		AND TRUNC(attendance_date) = TRUNC(SYSDATE)
	</update>


	<select id="getTodayTotalWorkingHoursByDept" parameterType="int"
		resultType="double">
		SELECT
		COALESCE(SUM(a.total_working_hours), 0)
		FROM
		attendance_management a
		JOIN employees e ON a.employee_no =
		e.employee_no
		WHERE e.department_no = #{departmentNo}
		AND
		TRUNC(a.attendance_date) = TRUNC(SYSDATE)
	</select>


<select id="selectDepartmentAttendanceDetail"
    parameterType="int"
    resultType="com.yedam.app.group.service.AttendanceManagementVO">
    SELECT
        a.*,
        e.employee_name,
        d.department_name
    FROM
        attendance_management a
    JOIN
        employees e ON a.employee_no = e.employee_no
    JOIN
        department d ON e.department_no = d.department_no
    WHERE
        e.department_no = #{departmentNo}
</select>

</mapper>
