<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.yedam.app.group.mapper.AttendanceMapper">

  <!-- ✅ 공통 ResultMap: 출결 정보 + 부서명 + 사원명 + 초과근무 상세 포함 -->
  <resultMap id="AttendanceResultMap" type="com.yedam.app.group.service.AttendanceManagementVO">
    <!-- 기본 출결 정보 매핑 -->
    <id property="workAttitudeId" column="work_attitude_id" />
    <result property="attendanceDate" column="attendance_date" />
    <result property="clockInTime" column="clock_in_time" />
    <result property="clockOutTime" column="clock_out_time" />
    <result property="workAttitudeType" column="work_attitude_type" />
    <result property="reason" column="reason" />
    <result property="totalWorkingHours" column="total_working_hours" />

    <!-- 사원 및 부서 정보 -->
    <result property="departmentName" column="department_name" />
    <result property="employeeNo" column="employee_no" />
    <result property="employeeName" column="employee_name" />

    <!-- 초과근무 요약 정보 -->
    <result property="totalOvertimeTime" column="overtime_time" />

    <!-- ✅ 초과근무 상세 정보 매핑 (1:1 관계) -->
    <association property="overtimeList" javaType="com.yedam.app.group.service.OvertimeVO">
      <result property="overtimeTime" column="overtime_time" />
      <result property="overtimeDate" column="overtime_date" />
      <result property="overtimeType" column="overtime_type" />
      <result property="overtimeId" column="overtime_id" />
      <result property="draftDocumentNumber" column="draft_document_number" />
      <result property="workAttitudeId" column="work_attitude_id" />
    </association>
  </resultMap>

  <!-- ✅ 출근 INSERT 쿼리 -->
  <insert id="insertClockIn" parameterType="AttendanceManagementVO">
    INSERT INTO attendance_management (
      work_attitude_id, employee_no, attendance_date,
      clock_in_time, work_attitude_type, reason
    ) VALUES (
      ATTENDANCE_MANAGEMENT_SEQ.NEXTVAL, -- 시퀀스 사용
      #{employeeNo}, #{attendanceDate}, #{clockInTime},
      #{workAttitudeType}, #{reason}
    )
  </insert>

  <!-- ✅ 퇴근 UPDATE 쿼리 -->
  <update id="updateClockOut" parameterType="AttendanceManagementVO">
    UPDATE attendance_management
    SET clock_out_time = #{clockOutTime}
    WHERE employee_no = #{employeeNo}
    AND TRUNC(attendance_date) = TRUNC(SYSDATE) -- 오늘 날짜만
    AND clock_out_time IS NULL -- 퇴근이 아직 안 된 경우만
  </update>

  <!-- ✅ 오늘 출근 여부 확인 -->
  <select id="countTodayClockIn" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM attendance_management
    WHERE employee_no = #{employeeNo}
    AND TRUNC(attendance_date) = TRUNC(SYSDATE)
    AND clock_in_time IS NOT NULL
  </select>

  <!-- ✅ 오늘 퇴근 여부 확인 -->
  <select id="countTodayClockOut" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM attendance_management
    WHERE employee_no = #{employeeNo}
    AND TRUNC(attendance_date) = TRUNC(SYSDATE)
    AND clock_out_time IS NOT NULL
  </select>

  <!-- ✅ 특정 사원의 전체 출결 목록 조회 -->
  <select id="selectInfo" parameterType="int" resultMap="AttendanceResultMap">
    SELECT
      am.work_attitude_id,
      am.attendance_date,
      am.clock_in_time,
      am.clock_out_time,
      am.work_attitude_type,
      am.reason,
      am.total_working_hours,
      d.department_name,
      e.employee_no,
      e.employee_name,
      o.overtime_time,
      o.overtime_date,
      o.overtime_type,
      o.overtime_id,
      o.draft_document_number
    FROM attendance_management am
    JOIN employees e ON am.employee_no = e.employee_no
    JOIN department d ON e.department_no = d.department_no
    LEFT JOIN overtime o ON am.work_attitude_id = o.work_attitude_id
    WHERE am.employee_no = #{employeeNo}
    ORDER BY am.attendance_date DESC
  </select>

  <!-- ✅ 초과근무 INSERT 쿼리 -->
  <insert id="insertOvertime" parameterType="OvertimeVO">
    INSERT INTO overtime (
      overtime_id,
      overtime_time,
      overtime_date,
      overtime_type,
      work_attitude_id,
      draft_document_number
    ) VALUES (
      OVERTIME_SEQ.NEXTVAL,
      #{overtimeTime},
      #{overtimeDate},
      #{overtimeType},
      #{workAttitudeId},
      #{draftDocumentNumber}
    )
  </insert>

  <!-- ✅ 특정 출결에 대한 초과근무 상세 조회 -->
  <select id="getOvertimeByWorkAttitudeId" parameterType="int" resultType="OvertimeVO">
    SELECT overtime_time, overtime_date, overtime_type,
           overtime_id, work_attitude_id, draft_document_number
    FROM overtime
    WHERE work_attitude_id = #{workAttitudeId}
    ORDER BY overtime_date DESC
  </select>

  <!-- ✅ 특정 사원의 총 초과근무 시간(분 단위) 조회 -->
  <select id="calculateTotalOvertime" parameterType="int" resultType="int">
    SELECT COALESCE(SUM(overtime_time), 0)
    FROM overtime o
    INNER JOIN attendance_management am ON am.work_attitude_id = o.work_attitude_id
    WHERE am.employee_no = #{employeeNo}
  </select>

  <!-- ✅ 부서별 근무 요약 (차트용) -->
  <select id="getDepartmentAttendanceSummary" resultType="AttendanceSummaryDTO">
    SELECT 
      e.employee_no,
      e.employee_name,
      d.department_name,

      -- 총 근무시간: clockIn/Out 이 있는 날만 합산 (시간 단위)
      ROUND(SUM(
        CASE
          WHEN a.clock_in_time IS NOT NULL AND a.clock_out_time IS NOT NULL THEN
            (a.clock_out_time - a.clock_in_time) * 24
          ELSE 0
        END
      ), 2) AS totalWorkingHours,

      -- 초과근무 시간: 분 ➝ 시간 단위로 변환
      ROUND(NVL(SUM(o.overtime_time), 0) / 60) AS overtimeHours

    FROM employees e
    JOIN department d ON e.department_no = d.department_no
    LEFT JOIN attendance_management a ON e.employee_no = a.employee_no
      AND a.attendance_date IS NOT NULL
    LEFT JOIN overtime o ON a.work_attitude_id = o.work_attitude_id
    WHERE e.department_no = #{departmentNo}
    GROUP BY e.employee_no, e.employee_name, d.department_name
    ORDER BY e.employee_no
  </select>

  <!-- ✅ 오늘 해당 부서 사원들의 출근 현황 리스트 -->
  <select id="selectTodayAttendanceByDept" parameterType="int" resultMap="AttendanceResultMap">
    SELECT
      a.work_attitude_id,
      a.attendance_date,
      a.clock_in_time,
      a.clock_out_time,
      a.work_attitude_type,
      a.reason,
      a.total_working_hours,
      d.department_name,
      e.employee_no,
      e.employee_name,
      o.overtime_time AS totalOvertimeTime
    FROM employees e
    JOIN department d ON e.department_no = d.department_no
    LEFT JOIN attendance_management a 
      ON e.employee_no = a.employee_no 
      AND TRUNC(a.attendance_date) = TRUNC(SYSDATE)
    LEFT JOIN overtime o 
      ON a.work_attitude_id = o.work_attitude_id
    WHERE d.department_no = #{departmentNo}
    ORDER BY a.clock_in_time
  </select>

  <!-- ✅ 사원의 최근 출결 1건 요약 조회 -->
  <select id="getAttendanceSummary" parameterType="int" resultType="AttendanceManagementVO">
    SELECT *
    FROM (
      SELECT am.*, d.department_name, e.employee_name
      FROM attendance_management am
      JOIN employees e ON am.employee_no = e.employee_no
      JOIN department d ON e.department_no = d.department_no
      WHERE am.employee_no = #{employeeNo}
      ORDER BY am.attendance_date DESC
    )
    WHERE ROWNUM = 1
  </select>

</mapper>
